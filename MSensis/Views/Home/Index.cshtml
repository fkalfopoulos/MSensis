
@model MSensis.ViewModels.UserViewModel
@inject MSensis.Models.MSensisContext _context
@{

    DateTime start = new DateTime(DateTime.Now.Date.Year, 1, 1);
    DateTime end = start.AddMonths(12);

    decimal custopen = _context.Invoices.Where(x => x.Invoice_Type == "Draft" && (x.Timestamp >= start.Date && x.Timestamp <= end.Date)).Sum(x => x.PricePerUnit);
    decimal custpaid = _context.Invoices.Where(x => x.Invoice_Type == "Draft" && (x.Timestamp >= start.Date && x.Timestamp <= end.Date)).Sum(x => x.PricePerUnit);
    decimal vendopen = _context.Invoices.Where(x => x.Invoice_Type == "Issued" && (x.Timestamp >= start.Date && x.Timestamp <= end.Date)).Sum(x => x.PricePerUnit);
    decimal vendpaid = _context.Invoices.Where(x => x.Invoice_Type == "Issued" && (x.Timestamp >= start.Date && x.Timestamp <= end.Date)).Sum(x => x.PricePerUnit);

    decimal totalcust = custopen + custpaid;
    decimal totalvend = vendopen + vendpaid;


    int perccust = (totalcust != 0) ? Convert.ToInt32(decimal.Divide(custpaid, totalcust) * 100) : 0;
    int percvend = (totalvend != 0) ? Convert.ToInt32(decimal.Divide(vendpaid, totalvend) * 100) : 0;

    List<string> labels = new List<string>();

    DateTime now = DateTime.Now;
    DateTime now7 = now.AddMonths(-7);
    DateTime dcount = now7;

    var mycompanies = _context.Companies.Where(u => u.User.Id == Model.User.Id).ToList();


    decimal[] valopen = new decimal[8];
    List<Invoice> opens = _context.Invoices.Where(x => x.Invoice_Type == "Issued" && (x.Timestamp >= now7.Date && x.Timestamp <= now.Date)).ToList();
    int index = 0;
    while (now7.Date <= now.Date)
    {
        valopen[index] = opens.Where(x => x.Timestamp.Equals(now7.Month)).Sum(x => x.PricePerUnit);
        labels.Add(now7.ToString("MMMM"));
        now7 = now7.AddMonths(1);
        index++;
    }


    decimal[] valpaid = new decimal[8];
    now7 = now.AddMonths(-7);
    index = 0;
    List<Invoice> paids = _context.Invoices.Where(x => x.Invoice_Type == "Draft" && (x.Timestamp >= now7.Date && x.Timestamp <= now.Date)).ToList();


    while (now7.Date <= now.Date)
    {
        valpaid[index] = paids.Where(x => x.Timestamp.Equals(now7.Month)).Sum(x => x.PricePerUnit);
        now7 = now7.AddMonths(1);
        index++;
    }

}




<section class="content-header">
    <h1>
        Dashboard
        <small>Control panel</small>
    </h1>
    <ol class="breadcrumb">
        <li>Hello </li>
        <li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>
        <li class="active">Dashboard</li>
    </ol>
</section>
<!-- Main content -->
<section class="content">
    <!-- Small boxes (Stat box) -->
    <div class="row">
        <div class="col-lg-3 col-xs-6">

            <div class="small-box bg-aqua">
                <div class="inner">
                    <h3>@Model.TotalVatThree.ToString("#.##")€</h3>
                    <p>Total Vat Last 3 Months</p>
                </div>
                <div class="icon">
                    <i class="fa fa-user-friends"></i>
                </div>
                <a href='@Url.Action("Index","Entities")' class="small-box-footer"> More info  <i class="fa fa-arrow-circle-right"> </i></a>
            </div>
        </div>

        <!-- ./col -->
        <div class="col-lg-3 col-xs-6">

            <div class="small-box bg-red">
                <div class="inner">
                    <h3>@Model.TotalValueSix.ToString("#.##")€</h3>
                    <p>Total Value Past 6 months</p>
                </div>
                <div class="icon">
                    <i class="fa fa-users"></i>
                </div>
                <a href="#" class="small-box-footer">More info <i class="fa fa-arrow-circle-right"></i></a>
            </div>
        </div>
        <!-- ./col -->


        <div class="col-lg-3 col-xs-6">
            <!-- small box -->
            <div class="small-box bg-yellow">
                <div class="inner">
                    <h3>@Model.TotalValueThree.ToString("#.##")€</h3>
                    <p>Total Value of 3 months</p>
                </div>
                <div class="icon">
                    <i class="fa fa-users"></i>
                </div>
                <a asp-action="CreatePDF" asp-controller="MSensis" class="small-box-footer">
                    Print last pdf <i class="fa fa-arrow-circle-right"></i>
                </a>
            </div>
        </div>


        <div class="col-lg-3 col-xs-6">

            <div class="small-box bg-green">
                <div class="inner">
                    <h3>@Model.TotalVatSix.ToString("#.##")€</h3>
                    <p>Total Vat Past 6 months</p>
                </div>
                <div class="icon">
                    <i class="fa fa-users"></i>
                </div>
                <a href="#" class="small-box-footer">More info <i class="fa fa-arrow-circle-right"></i></a>
            </div>
        </div>

    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">Monthly Recap Report Draft vs Issued</h3>
                    <div class="box-tools pull-right">
                        <button type="button" class="btn btn-box-tool" data-widget="collapse">
                            <i class="fa fa-minus"></i>
                        </button>
                        <div class="btn-group">
                            <button type="button" class="btn btn-box-tool dropdown-toggle" data-toggle="dropdown">
                                <i class="fa fa-wrench"></i>
                            </button>
                            <ul class="dropdown-menu" role="menu">
                                <li><a href="#">Action</a></li>
                                <li><a href="#">Another action</a></li>
                                <li><a href="#">Something else here</a></li>
                                <li class="divider"></li>
                                <li><a href="#">Separated link</a></li>
                            </ul>
                        </div>
                        <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                    </div>
                </div>
                <!-- /.box-header -->
                <div class="box-body">
                    <div class="row">
                        <div class="col-md-8">
                            <p class="text-center">
                                <strong></strong>
                            </p>
                            <div class="chart">
                                <!-- Sales Chart Canvas -->
                                <canvas id="salesChart" style="height: 180px;"></canvas>
                            </div>
                            <!-- /.chart-responsive -->
                        </div>
                        <!-- /.col -->
                        <div class="col-md-4">
                            <p class="text-center">
                                <strong>Open vs Paid</strong>
                            </p>
                            <!-- /.progress-group -->
                            <div class="progress-group">
                                <span class="progress-text"> Open</span>
                                <span class="progress-number"><b>@custpaid.ToString("0.##")</b>/@totalcust.ToString("0.##")</span>
                                <div class="progress sm">
                                    <div class="progress-bar progress-bar-red" style="width: @perccust%"></div>
                                </div>
                            </div>
                            <!-- /.progress-group -->
                            <div class="progress-group">
                                <span class="progress-text">Paid Vendor</span>
                                <span class="progress-number"><b>@vendpaid.ToString("0.##")</b>/@totalvend.ToString("0.##")</span>
                                <div class="progress sm">
                                    <div class="progress-bar progress-bar-green" style="width: @percvend%"></div>
                                </div>
                            </div>
                        </div>
                        <!-- /.col -->
                    </div>
                    <!-- /.row -->
                </div>
            </div>
            <!-- /.box -->
        </div>
        <!-- /.col -->
    </div>
    <!-- /.row -->
</section>
<!-- /.content -->
 

<section class="content">

    <div class="row">
        <!-- TO DO List -->
        <div class="box box-primary">
            <div class="box-header">
                <i class="ion ion-clipboard"></i>
                <h3 class="box-title">My Clients</h3>
                <div class="box-tools pull-right">
                    <ul class="pagination pagination-sm inline"></ul>
                </div>
            </div>
            <!-- /.box-header -->
            <div class="box-body">
                <!-- See dist/js/pages/dashboard.js to activate the todoList plugin -->
                <ul class="todo-list">
                    @foreach (var c in Model.Clients)
                    {
                        <li>

                            <span class="handle">
                                <i class="fa fa-ellipsis-v"></i>
                                <i class="fa fa-ellipsis-v"></i>
                            </span>
                            <!-- checkbox -->
                            <input type="checkbox" value="">

                            <span class="text">@c.CompanyName</span>

                            <small class="label label-danger"><i class="fa fa-clock-o"></i></small>

                            <div class="tools">

                                <a asp-action="Update_Client" asp-route-id="@c.Id">Update <i class="fa fa-edit"></i></a>
                                <i class="fa fa-trash-o"></i>
                            </div>
                        </li>

                    }

                </ul>

            </div>
            <!-- /.box-body -->
            <div class="box-footer clearfix no-border">
                <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("Create_Client","Home")'"><i class="fa fa-plus"></i> Add Client</button>
            </div>
        </div>
        </div>
         

            <div class="box box-danger">
                <div class="box-header with-border">
                    <h3 class="box-title">Companies List Chart</h3>
                    <div class="box-tools pull-right">
                        <button type="button" class="btn btn-box-tool" data-widget="collapse">
                            <i class="fa fa-minus"></i>
                        </button>
                        <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                    </div>
                </div>

                <div class="box-body chart-responsive">
                    <div class="chart" id="sales-chart" style="height: 300px; position: relative;"></div>
                </div>

            </div>

        </div>

     
   
</section>
<!-- right col -->
  
<!-- /.row (main row) -->


<script src="~/js/raphael.min.js"></script>
<script src="~/js/morris.min.js"></script>

<script>


    $(function () {
        "use strict";
        //DONUT CHART
        var donut = new Morris.Donut({
            element: 'sales-chart',
            resize: true,
            colors: ["#3c8dbc", "#f56954", "#00a65a"],
            data: [
                { label: "Total Invoices", value: @Model.User_Invoices },

            ],
            hideHover: 'auto'
        });
    });



</script>

<script>
   $(function () {
            // -----------------------
            // - MONTHLY SALES CHART -
            // -----------------------

            var jvalpaid = @Html.Raw(Json.Serialize(valpaid));
            var jvalopen = @Html.Raw(Json.Serialize(valopen));
            var jlabels = @Html.Raw(Json.Serialize(labels));


            // Get context with jQuery - using jQuery's .get() method.
            var salesChartCanvas = $('#salesChart').get(0).getContext('2d');
            // This will get the first returned node in the jQuery collection.
            var salesChart = new Chart(salesChartCanvas);

            var salesChartData = {
            labels: jlabels,
            datasets: [
            {
            label: 'Paid',
            fillColor: 'rgb(210, 214, 222)',
            strokeColor: 'rgb(210, 214, 222)',
            pointColor: 'rgb(210, 214, 222)',
            pointStrokeColor: '#c1c7d1',
            pointHighlightFill: '#fff',
            pointHighlightStroke: 'rgb(220,220,220)',
            data: jvalpaid
            },
            {
            label: 'Open',
            fillColor: 'rgba(60,141,188,0.9)',
            strokeColor: 'rgba(60,141,188,0.8)',
            pointColor: '#3b8bba',
            pointStrokeColor: 'rgba(60,141,188,1)',
            pointHighlightFill: '#fff',
            pointHighlightStroke: 'rgba(60,141,188,1)',
            data: jvalopen
            }
            ]
            };

            var salesChartOptions = {
            // Boolean - If we should show the scale at all
            showScale: true,
            // Boolean - Whether grid lines are shown across the chart
            scaleShowGridLines: false,
            // String - Colour of the grid lines
            scaleGridLineColor: 'rgba(0,0,0,.05)',
            // Number - Width of the grid lines
            scaleGridLineWidth: 1,
            // Boolean - Whether to show horizontal lines (except X axis)
            scaleShowHorizontalLines: true,
            // Boolean - Whether to show vertical lines (except Y axis)
            scaleShowVerticalLines: true,
            // Boolean - Whether the line is curved between points
            bezierCurve: true,
            // Number - Tension of the bezier curve between points
            bezierCurveTension: 0.3,
            // Boolean - Whether to show a dot for each point
            pointDot: false,
            // Number - Radius of each point dot in pixels
            pointDotRadius: 4,
            // Number - Pixel width of point dot stroke
            pointDotStrokeWidth: 1,
            // Number - amount extra to add to the radius to cater for hit detection outside the drawn point
            pointHitDetectionRadius: 20,
            // Boolean - Whether to show a stroke for datasets
            datasetStroke: true,
            // Number - Pixel width of dataset stroke
            datasetStrokeWidth: 2,
            // Boolean - Whether to fill the dataset with a color
            datasetFill: true,
            // String - A legend template
            legendTemplate: '<ul class=\'<%=name.toLowerCase()%>-legend\'><% for (var i=0; i<datasets.length; i++){%><li><span style=\'background-color:<%=datasets[i].lineColor%>\'></span><%=datasets[i].label%></li><%}%></ul>',
            // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
            maintainAspectRatio: true,
            // Boolean - whether to make the chart responsive to window resizing
            responsive: true
            };

            // Create the line chart
            salesChart.Line(salesChartData, salesChartOptions);

            // ---------------------------
            // - END MONTHLY SALES CHART -
            // ---------------------------
            });
</script>